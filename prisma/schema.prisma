// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  storageUsed   BigInt       @default(0)
  storageLimit  BigInt       @default(5368709120) // 5G in bytes
  accounts      Account[]
  sessions      Session[]
  files         File[]
  folders       Folder[]
  sharedFile    SharedFile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id          String   @id @default(cuid())
  name        String
  type        String
  size        BigInt
  path        String
  storagePath String
  isPublic    Boolean  @default(false)
  userId      String
  folderId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder     Folder?      @relation(fields: [folderId], references: [id], onDelete: Cascade)
  sharedWith SharedFile[]
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  path      String
  parentId  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Folder?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderToFolder")
  files    File[]
}

model SharedFile {
  id        String    @id @default(cuid())
  fileId    String
  userId    String
  shareCode String    @unique
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
